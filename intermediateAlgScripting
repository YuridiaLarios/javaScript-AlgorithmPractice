/*
Sum All Numbers in a Range

We'll pass you an array of two numbers. Return the sum of those two numbers and all numbers between them.
The lowest number will not always come first.
*/

function sumAll(arr) {
  var minVal = Math.min(arr[0], arr[1]);
  var maxVal = Math.max(arr[1], arr[0]);
  var sum = 0;
  for(var i = minVal; i<= maxVal; i++){
    sum += i;
  }
  return sum;
}

sumAll([1, 4]);







/*
Diff Two Arrays


Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both.
In other words, return the symmetric difference of the two arrays.
*/
function diffArray(arr1, arr2) {
  var newArr = [];
  // Same, same; but different.
  var concated = arr1.concat(arr2); 
  
  return concated.filter(function(values) {
    return !arr2.includes(values) || !arr1.includes(values);
  }); 
    
//   var filteredTwice = arr2.filter(function(values) {
//     return !arr1.includes(values);
//   }); 
  
//   return filteredTwice.concat(filteredOnce);
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);







// CHALLENGING: create a program that converts an integer to a Roman Numeral.

var convertToRoman = function(num) {

  var decimalValue = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ];
  var romanNumeral = [ 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I' ];

  var romanized = '';

  for (var index = 0; index < decimalValue.length; index++) {
    while (decimalValue[index] <= num) {
      romanized += romanNumeral[index];
      num -= decimalValue[index];
    }
  }

  return romanized;
}

// test here
convertToRoman(36);










//Write an algorithm that will take an array for the first argument,
//and return an array with all the objects that matches all the properties and values in the Object passed as second parameter.
function whatIsInAName(collection, source) {
  // What's in a name?
  var arr = [];
  // Only change code below this line
  var keySourceArr = Object.keys(source);
  return collection.filter(function (currentObject) {  //collection is an array, filter goes                                                           thru each value of collection
           for(var i = 0; i < keySourceArr.length; i++) { //iterate true the # of pairs
             
             //check if the object in the collection doesn't have the key 
             // or the property value doesn't match the value in source.
             if(!currentObject.hasOwnProperty(keySourceArr[i]) ||
                currentObject[keySourceArr[i]] !== source[keySourceArr[i]]) {
              return false;
          }
             
        }
    return true;
  });
  
  // Only change code above this line
}

whatIsInAName([{ first: "Romeo", last: "Montague" }, 
               { first: "Mercutio", last: null }, 
               { first: "Tybalt", last: "Capulet" }], 
              
               { last: "Capulet"});



//var valuesArr = Object.values(source);
//    var numberOfSourceObjects = valuesArr.length;
//   console.log("array of enumerated values = " + valuesArr.join(", "));
//   for(var i=0; i<collection.length; i++){
//     var currentObject = collection[i];
//     if(currentObject.hasOwnProperty("last")){
//        if(currentObject.)
//   }










//Search and Replace

//You will create a program that takes a sentence, then search for a word in it and replaces it for a new one 
//while preserving the initial uppercase if there is one.\

function myReplace(str, before, after) {
  
  var arr = str.split(' ');
  var index = arr.indexOf(before);
  if(index > -1){
    if(before.toLowerCase() === before){
      arr[index] = after;
    } else {
      
      arr[index] = after.charAt(0).toUpperCase() + after.substr(1);
    }
  }
  
  return arr.join(' ');
}

myReplace("He is Sleeping on the couch", "Sleeping", "sitting");

/*

better answer: using the knowledge of .replace method and is better to use slice b/c
it has better performance

function myReplace(str, before, after) {
  // Find index where before is on string
  var index = str.indexOf(before);
  // Check to see if the first letter is uppercase or not
  if (str[index] === str[index].toUpperCase()) {
    // Change the after word to be capitalized before we use it.
    after = after.charAt(0).toUpperCase() + after.slice(1);
  }
  // Now replace the original str with the edited one.
  str = str.replace(before, after);

  return str;
}

// test here
myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");


*/








//Missing Letters
//create a program that will find the missing letter from a string and return it. 
//If there is no missing letter, the program should return undefined. 
//There is currently no test case for the string missing more than one letter, but if there was one, recursion would be used. 
//Also, the letters are always provided in order so there is no need to sort them.

Relevant Links
function fearNotLetter(str) {  
  var unicodeArr = str.split('').map.call(str, function(letter){
     return letter.charCodeAt(0);
  });
  
  var currentLetter = str.charCodeAt(0);
  for(var i=0; i<unicodeArr.length; i++){
    if(unicodeArr[i] != currentLetter){
     
      return String.fromCharCode(currentLetter);
    }
    currentLetter += 1;
    
  }
  return undefined;
}

fearNotLetter("abce");







// This program is very simple, the trick is to understand what a boolean primitive is. The programs requires a true or false answer.
function booWho(bool) {
  // What is the new fad diet for ghost developers? The Boolean.
  
  return (bool ===true || bool ===false);

}

booWho(NaN);

/*
function booWho(bool) {
  return typeof bool === 'boolean';
}

// test here
booWho(null);
*/










// Sorted Union
//The program has to return a new array of unique values from two original arrays in the order they show up. 
//So there is not sorting required, and there shouldn't be any duplicates.

function uniteUnique(arr) {
  var argsArray = Array.from(arguments).slice(1).reduce(function(a,b){
    return a.concat(b);
  },[]);
  
  arr.push(argsArray.filter(function(value){
      return !arr.includes(value);
  }));
  return arr.reduce(function(a,b){
    return a.concat(b);
  },[]);
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);
/*
//Use reduce function to flatten the array
  newArr = args.reduce(function(arrA,arrB){
  //Apply filter to remove the duplicate elements in the array
    return arrA.concat(arrB.filter(function(i){
      return arrA.indexOf(i) === -1;
    }));
  });
*/
